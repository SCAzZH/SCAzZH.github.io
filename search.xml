<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git和GitHub基本使用</title>
    <url>/2023/12/13/Git%E5%92%8CGitHub%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="设置用户名密码："><a href="#设置用户名密码：" class="headerlink" title="设置用户名密码："></a>设置用户名密码：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git confit --global user.email <span class="string">&quot;emailUrl&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="查看用户名信息"><a href="#查看用户名信息" class="headerlink" title="查看用户名信息"></a>查看用户名信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>

<h3 id="生成本地ssh密钥"><a href="#生成本地ssh密钥" class="headerlink" title="生成本地ssh密钥"></a>生成本地ssh密钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;1483221150@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p>
<h3 id="查看密钥"><a href="#查看密钥" class="headerlink" title="查看密钥"></a>查看密钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>将要修改的东西加入暂存区</p>
<p>Git命令不会施加于空文件夹，git add一个文件夹实际上是文件夹中的所有文件，不是文件夹本身。文件夹里新增一个文件必须加入暂存区，不然不参与版本控制。</p>
<p>每次提交，分支会指向最后一次提交，将上次提交作为父节点。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init  <span class="comment">#建立工作区</span></span><br><span class="line">$ git add &lt;文件名&gt;  <span class="comment">#将要修改的文件加入暂存区</span></span><br><span class="line">$ git commit  提交所有<span class="comment">#</span></span><br><span class="line">$ git commit &lt;文件名&gt; <span class="comment">#提交一个文件</span></span><br><span class="line">$ git reset		<span class="comment">#将最后一次提交替换暂存区文件</span></span><br><span class="line">$ git checkout &lt;文件名&gt;	 <span class="comment">#将暂存区文件转入工作目录</span></span><br><span class="line">$ git checkout &lt;分支名&gt; <span class="comment">#转到分支</span></span><br></pre></td></tr></table></figure>

<p>可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;某提交sha-1&gt;			<span class="comment">#切换到某提交</span></span><br><span class="line">$ git branch &lt;新分支名&gt;	<span class="comment">#创建新分支</span></span><br></pre></td></tr></table></figure>

<p>推送到远程库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;			<span class="comment">#远程本地分支名相同</span></span><br><span class="line">$ git push origin --delete master		<span class="comment">#提交并删除本地分支</span></span><br><span class="line">$ git push --force origin master		<span class="comment">#有版本差异，但强制推送</span></span><br></pre></td></tr></table></figure>









<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>掌握：</p>
<ul>
<li><p>添加ssh</p>
</li>
<li><p>新建仓库+ReadMe.md初始化</p>
</li>
<li><p>pull合并分支</p>
</li>
</ul>
<h3 id="添加一个ssh-key"><a href="#添加一个ssh-key" class="headerlink" title="添加一个ssh key"></a>添加一个ssh key</h3><p>如果已经生成rsa密钥,没有则先生成，拷贝公钥内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>GitHub右上角Settings &#x3D;&gt; SSH and GPG keys &#x3D;&gt; New SSH Key </p>
<p>将内容复制进去保存，然后以后就可以用给SSH地址了</p>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>博客问题总结</title>
    <url>/2023/12/11/%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>此文用以记录搭建和使用博客中遇到的问题</p>
</blockquote>
<h2 id="图床问题"><a href="#图床问题" class="headerlink" title="图床问题"></a>图床问题</h2><p>图床问题是静态博客都会遇到的问题。因为文章采用Markdown语法，所以文章中的图片使用url来引用，可以使用本地地址或网络地址，要在网络中显示就必须使用网络地址。所以必须要有一个存放图片的地方。</p>
<p>本博客使用图床：GitHub（有时访问会很慢）</p>
<p>搜索了很多免费图床，大多都存在不稳定或有跑路可能（导致图片全体丢失，如果没有备份后果会很严重）。综合来说，虽然GitHub作为图床有时访问会比较慢，但是它几乎不可能跑路，并且不限空间，使用非常方便。不过GitHub作为图床的仓库将会是公开的，所以如果十分注重隐私的话建议选择其他图床。</p>
<p>图床上传工具PicGo</p>
<ul>
<li><a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo</a></li>
</ul>
<p>它支持以GitHub作为图床，配置简单，并且Typora也支持PicGo上传图片，可谓是一条龙服务。</p>
<p>Typora设置：</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213232651986.png" alt="image-20231213232651986"></p>
<p>PicGo设置：<br><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213233108701.png" alt="image-20231213233108701"></p>
<blockquote>
<p>Token在账户的Settings（点击右上角头像）里的Developer Settings里生成，生成的Token要立即复制备份，它只会显示一次。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213233617099.png" alt="image-20231213233617099"></p>
<p>自定义域名：图片的url，用于访问图片。</p>
<p>GitHub图床访问格式：<a href="https://raw.githubusercontent.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D/%E5%88%86%E6%94%AF">https://raw.githubusercontent.com/用户名/仓库名/分支</a></p>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo博客搭建流程</title>
    <url>/2023/12/11/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>此文章用于记录本博客搭建过程及一些心得体会，本博客的搭建采用以下对象：</p>
<ul>
<li><p>Hexo：使用Hexo框架快速构建博客。</p>
</li>
<li><p>Butterfly：采用Butterfly主题。（备选Next、Keep）</p>
</li>
<li><p>GitHub：目标是构建一个静态博客，所以采用GitHub Page来部署，图床也使用Github。</p>
</li>
</ul>
<p>Get：—<a href=#a>npm</a>	—<a href=#b>博客导航栏问题</a>	—<a href=#c>Git Page原理</a></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备<a id="a"></a></h2><h3 id="安装Node-js和npm"><a href="#安装Node-js和npm" class="headerlink" title="安装Node.js和npm"></a>安装Node.js和npm</h3><p>要搭建静态博客，Hexo是一个不错的框架。在安装Hexo之前，需要下载Node.js，Node.js是一个开源的，跨平台的javascript运行时环境，通俗的说，就是一个js库，要把这个js库放到全局环境中，才能使用相应Node命令。</p>
<ul>
<li>Node.js官网：<a href="https://nodejs.org/">https://nodejs.org</a></li>
</ul>
<p>安装好后可以在Windows的cmd里敲node -v，安装成功会提示：node的版本号。</p>
<div class="note info simple"><p>建议使用node最新的LTS版（长期支持版）。</p>
</div>

<p>安装好Node后，需要安装npm（Node Package Manager），npm是一个包管理器，许多框架都托管在npm服务器上。使用npm，只需要几行命令就可以把开发需要的依赖包，环境等安装部署到本地，非常强大。</p>
<ul>
<li>npm中文文档：<a href="https://nodejs.cn/npm/about-npm/">npm 中文文档 (nodejs.cn)</a></li>
</ul>
<p>在访问一个框架的安装文档时，一般都会有类似以下的代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure>

<p>这是npm的一个命令，意思是node package manager install hexo-cli -global，node包管理器全局安装hexo-cli，hexo-cli是hexo官网提供的hexo环境。只需要一个命令就可以将hexo环境安装到全局。</p>
<p>输入命令回车后几秒钟就执行完成了，对于萌新来说可能不知道发生了什么。使用以下命令可以查看npm的全局安装路径</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm root <span class="literal">-g</span></span><br></pre></td></tr></table></figure>

<p>比如我的路径</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213163642745.png" alt="image-20231213163642745"></p>
<p>根据安装路径查看文件夹可以发现：</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213163700336.png" alt="image-20231213163700336"></p>
<p>刚刚安装好的hexo-cli文件夹存放在这里。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h3><div class="note info simple"><p>现在已经有了全局Hexo环境，可以使用Hexo命令了。</p>
</div>

<p>可以在任意文件夹构建博客。比如我在桌面创建一个文件夹，打开它然后在此位置打开cmd，点击导航框，在文件夹目录前加cmd，然后运行</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213165208104.png" alt="image-20231213165208104"></p>
<p>在cmd中输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo init blog   </span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>这个blog是博客工程目录的名称，可以更改</p>
</div>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> blog	<span class="comment">#意思是进入blog这个文件，如果改过名，则用之前自定义的名称</span></span><br><span class="line"><span class="variable">$</span> npm install  <span class="comment">#npm安装hexo所需的相关文件，命令执行后自动安装 </span></span><br><span class="line"><span class="variable">$</span> hexo server  <span class="comment">#启动hexo，默认地址http://localhost:4000</span></span><br></pre></td></tr></table></figure>

<p>命令执行完后，成功提示如下:</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213172707285.png" alt="image-20231213172707285"></p>
<p>访问<a href="http://localhost:4000，本地博客已经部署完成。">http://localhost:4000，本地博客已经部署完成。</a></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><div class="note info simple"><p>从此处起以hexo默认主题landscape为准。</p>
</div>

<h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客<a id="write"></a></h3><p>在blog文件夹下的cmd中输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo new post <span class="string">&quot;文章名&quot;</span>   <span class="comment">#输入要写的文章名</span></span><br><span class="line"><span class="comment"># 比如：hexo new post &quot;Test&quot;  执行后会在source/_post文件夹中生成Test.md文件</span></span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>md后缀文件是Markdown文本文件，Markdown是一种以符号结构规则定义格式的文本语法，很容易上手。推荐使用Typora（付费）来写博客。</p>
</div>

<ul>
<li><p>MarkDown基本语法：<a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法 | Markdown 官方教程</a></p>
</li>
<li><p>Typora：<a href="https://typoraio.cn/">Typora 官方中文站 (typoraio.cn)</a></p>
</li>
</ul>
<p>打开Test.md就可以写博客了。在post文件夹下的文章会直接显示在博客上，无论写完与否。</p>
<p>也可以新建草稿页draft</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo new draft <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<p>写好后，发布</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo publish draft <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<p>后续写博客都是这样的流程。</p>
<h3 id="添加新页面（如Tags，Categories）"><a href="#添加新页面（如Tags，Categories）" class="headerlink" title="添加新页面（如Tags，Categories）"></a>添加新页面（如Tags，Categories）</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo new page <span class="string">&quot;页面名称&quot;</span></span><br></pre></td></tr></table></figure>

<p>如执行<code>hexo new page "test"</code>后运行，在网址栏中访问<a href="http://localhost:4000/test%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AEtest%E9%A1%B5%E9%9D%A2">http://localhost:4000/test可以访问test页面</a></p>
<blockquote>
<p>以上操作post、draft、page依据source&#x2F;scaffolds中对应的模板文件生成页面。</p>
<p>其实它们都是一个页面，只是由不同模板生成。</p>
</blockquote>
<p>模板文件中的头部被称为Font-matter:</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213195443473.png" alt="image-20231213195443473"></p>
<p>参数项说明：<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a></p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>大部分人都想要功能全面且简洁美观的博客，我也是如此。Hexo提供的默认主题landscape相对来说比较简约，功能也比较基础。Hexo的官网上有很多主题。经过筛选，我比较喜欢的主题有：</p>
<ul>
<li><p>Butterfly（美观，多彩，文档也非常棒）：<a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p>
</li>
<li><p>Next（简洁，清晰）：<a href="https://theme-next.js.org/">theme-next.js.org</a></p>
</li>
<li><p>Keep（简洁，美观）：<a href="https://v3.keep-docs.xpoet.cn/">Keep 主题使用手册 | Hexo 主题 Keep 官方文档 (xpoet.cn)</a></p>
</li>
</ul>
<p>我的博客选择的是Butterfly主题，因为它太优秀了。</p>
<div class="note info simple"><p>从此处起以Bufferfly主题为准。安装和配置只写主要过程，具体参考<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a>。</p>
</div>



<h3 id="安装-配置"><a href="#安装-配置" class="headerlink" title="安装&amp;配置"></a>安装&amp;配置</h3><p>npm安装：</p>
<blockquote>
<p>通过 npm 安装并不会在 themes 里生成主题文件夹，而是在 node_modules 里生成</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm install hexo<span class="literal">-theme-butterfly</span>		<span class="comment">#安装</span></span><br><span class="line"><span class="comment">## 更新 npm update hexo-theme-butterfly</span></span><br></pre></td></tr></table></figure>

<p>将工程目录主页下的_config.yml中的主题改为: butterfly</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span>	<span class="comment">#在_config.yml中按ctrl+f搜索theme，快速定位</span></span><br></pre></td></tr></table></figure>

<p>在工程目录主页新建bufferfly主题配置文件_config.butterfly.yml，找到node_modules&#x2F;hexo-theme-butterfly&#x2F;_config.yml将内容复制到_config.butterfly.yml。</p>
<p>butterfly的默认配置就非常棒，如果要个性化配置参考：<a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 安裝文檔(三) 主題配置-1 | Butterfly</a><a id="b"></a></p>
<blockquote>
<p>导航栏中的页面都需要初始化：执行hexo new page “xxx”，再在source文件中新增的相应文件中进行配置。</p>
<p>不论page还是post，它们其实都是一个页面，只是由不同模板生成，然后主题中的js在对不同的页面做不同的事，比如文章（post）显示一部分在主页，点开全页显示。标签（tags）显示所有文章中出现的tags。所以tags模板中不能有内容。</p>
</blockquote>
<p>写文章的步骤还是<a href=#write>上面</a>和一样。</p>
<h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3><p>留言和评论需要第三方的方式实现，暂时不考虑。</p>
<h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><p>Git及GitHub基础操作参考：<a href="https://scazzh.github.io/">Git和GitHub的基本使用</a></p>
<p>GitHub Page官方说明：<a href="https://pages.github.com/">GitHub Pages | Websites for you and your projects, hosted directly from your GitHub repository. Just edit, push, and your changes are live.</a></p>
<p>在GitHub新建Repository，勾选Add a README file可以快速初始化一个仓库。必须命名为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自定义名称.github.io</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213222112319.png" alt="image-20231213222112319"></p>
<p>修改项目工程文件中的_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:SCAzZH/scazzh.github.io.git</span>		<span class="comment">#我的github仓库地址</span></span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo clean  <span class="comment">#清除以前的静态文件</span></span><br><span class="line"><span class="variable">$</span> hexo generate  <span class="comment"># hexo g</span></span><br><span class="line"><span class="variable">$</span> hexo deploy	<span class="comment"># hexo d</span></span><br><span class="line"><span class="comment"># 后两步操作可以简写 hexo g -d</span></span><br></pre></td></tr></table></figure>

<p>成功提示如下，项目已经推送到目标仓库的master分支上</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213223608595.png" alt="image-20231213223608595"></p>
<p>点击GitHub仓库界面的Settings，选择左侧栏的Page，选择master&#x2F;(root)，这取决于上传的分支。</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213224427303.png" alt="11"></p>
<p>然后就可以通过之前设置的域名访问了。</p>
<p>写博客及上传的流程：<a id="c"></a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo new post <span class="string">&quot;demo&quot;</span></span><br><span class="line"><span class="comment">## 在_post文件夹中生成的demo.md中用markdown语法编写文章</span></span><br><span class="line"><span class="variable">$</span> hexo clean	<span class="comment">#清除缓存(publish文件夹)</span></span><br><span class="line"><span class="variable">$</span> hexo g <span class="literal">-d</span>    	<span class="comment">#生成静态文件并部署</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>GitHub Page的原理：根据官方说明可知，GitHub Page其实是解析的index.html文件的内容并显示。通过项目仓库的文件目录可以看到hexo为每个文章单独创建了一个文件夹，每个文件夹中都有一个index.html。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213225606436.png" alt="image-20231213225606436"></p>
<p>到此，搭建过程结束。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Butterfly主题</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Roll A Ball</title>
    <url>/2023/12/12/Roll%20A%20Ball%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Get：—<a href="#a">urp配置文件</a>	—<a href=#b>Material</a>	—<a href=#c>Smoothness</a>	—<a href=#d>Input System</a>	—<a href=#e>Rigidbody（刚体）</a>	—<a href=#f>OnMove(InputValue input)</a>	—<a href=#g>碰撞体(Collider)</a>	—<a href=#h>层级管理</a>	—<a href=#i>OnTriggerEnter(Collider other)</a>	—<a href=#j>Tag</a>	—<a href=#k>CompareTag</a>	—<a href=#l>Prefab(预制体)</a>	—<a href=#m>UI</a>	—<a href=#n>Text-TextMeshPro</a>	—<a href=#o>Rect Transform</a>	—<a href=#p>pivot</a></p>
<blockquote>
<p>游戏简介</p>
</blockquote>
<p>Roll A Ball是一款简单的3D小游戏，玩家通过控制小球运动迟到所有的可拾取的方块后获胜。</p>
<blockquote>
<p>游戏场景示例</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213141914491.png" alt="image-20231213141914491"></p>
<blockquote>
<p>游戏设计思路</p>
</blockquote>
<ol>
<li><p>新建项目（选择URP 3D项目模板），将模板和Sence单独存放在一个Template文件夹，相当于将模板Sence另存位。</p>
</li>
<li><p>新建一个Sence，新Sence包含Main Camera和Directional Light。</p>
</li>
<li><p>游戏的场景搭建，游戏是在一个小平台上运行，首先需要一个平台，在平台上新建一个球体，基本场景搭建完成。</p>
</li>
<li><p>让玩家能够操作小球移动。</p>
</li>
<li><p>摄像机跟随。</p>
</li>
<li><p>平台场景优化，设置边界围墙。</p>
</li>
<li><p>设置可拾取物，为游戏增加乐趣。</p>
</li>
<li><p>创建UI，在游戏游玩中为玩家提供信息。</p>
</li>
<li><p>游戏玩法完善，输赢规则。</p>
</li>
<li><p>游戏打包设置，游戏窗口大小等。</p>
</li>
</ol>
<blockquote>
<p>详细设计（基于Unity版本：2021.3.23f1c1 TLS   |  Unity Hub版本： 3.3.1-c1）</p>
</blockquote>
<p><strong>创建项目</strong></p>
<p>选择 3D Sample Scene(URP) 模板</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213141950028.png" alt="image-20231213141950028"></p>
<p>其他设置</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142027653.png" alt="image-20231213142027653"></p>
<p>经过一万年后，创建好的项目模板如下</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142102314.png" alt="image-20231213142102314"><br>这是一个示例Sence，用来展示URP的效果，将模板中所有文件存放到一个新建的Template文件夹，暂时不能删掉，因为里面有<strong id="a">urp配置文件</strong>，如果删掉urp渲染将加载不出来。</p>
<p>将示例Sence保存，然后新建一个Sence，新建一个Sence文件夹，将Sence保存在文件夹里。</p>
<p>我这里将示例文件里的urp配置提取了出来，然后保存在Setting文件夹中。</p>
<p>现在Sence界面还是一片空白。根据游戏设计思路，要先创建一个基本的游戏平台和游戏角色。</p>
<blockquote>
<p>一个物体的坐标是是物体中心的坐标</p>
</blockquote>
<p>新建一个Plane作为游戏的平台，命名为Ground，重置transform，将Scale改为（2,1,2），Plane的大小是10*10个网格。</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142125371.png" alt="image-20231213142125371"></p>
<p>将新建一个Materials文件夹，Material是有游戏中的材质，如游戏角色的颜色，贴图等。在Material文件夹中新建一个<strong id="b">Material</strong>，命名为Ground，将它拖拽到Hierarchy中的Ground这个GameObject上，这个Material将作为Ground的材质Ground进行渲染。设置它的<strong id="c">Smoothness</strong>为0.25，将它的取色器RGB改为（170，170，170），完成后Ground的样式如下</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142139848.png" alt="image-20231213142139848"></p>
<p>平台建立好后，需要创建游戏角色。新建一个Sphere，重命名为Player，将它的Transform重置后看到小球有一半在平台下方，将它的Transform中的Position中的y改为0.5可以看到小球刚好利于平面中间，默认的小球颜色不好看，所以要为它创建一个Material，使这个小球更具个性。随便设置一个颜色，修改Smoothness为0.75使小球看起来更光滑，示例如下</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142151172.png" alt="image-20231213142151172"></p>
<p>现在已经完成了平台和游戏角色的创建，现在要让玩家能够控制小球的移动，此时需要编写脚本，新建一个Scripts文件夹，将所有的脚本文件都存放在Scripts文件夹中，新建一个C# script文件，命名为PlayerController，也可以直接在Player的inspector窗口的最下方Add Component中新建Script，这样新建的script将直接挂载到Player上，在文件夹中创建的script可以通过拖拽的方式将script挂载到GameObject上。</p>
<p>在编写脚本之前，在Windows -&gt; Package Manage中安装一个<strong id="d">Input System</strong>，这使Unity官方的一个插件，用于获取输入并于游戏行为进行交互。</p>
<p>在Player的Inspector窗口中添加一个Player Input组件</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142207514.png" alt="image-20231213142207514"></p>
<p>点击Create Actions，系统会自动提醒要将文件保存到哪里，新建一个Inputs文件夹用以保存这个文件。其实现在输入wasd已经和游戏关联起来了，只需要取到输入的值，再根据值对Player进行物理作用就可以了，对一个GameObject进行物理作用需要给它添加一个组件<strong id="e">Rigidbody（刚体）</strong>，对一个物体施加力就是对刚体施加力，开始编写代码</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="comment">//需要使用InputSystem</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//要获取键盘输入的值，对小球施加力</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="comment">//用于获取刚体,不需要其他组件访问，所以私有</span></span><br><span class="line">    <span class="keyword">private</span> Rigidbody rb;</span><br><span class="line">    <span class="comment">//用于获取键盘输入的向量大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> movemenetX;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> movementY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//speed用以设置游戏角色的速度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> speed = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//在游戏开始时获取刚体</span></span><br><span class="line">        rb = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//OnMove是InputSystem提供的一个函数，下方解释</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMove</span>(<span class="params">InputValue input</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//input只能获取Vector2的值，此处的x，y在Unity3D中对应x，z</span></span><br><span class="line">        movementX = input.Get&lt;Vector2&gt;().x;</span><br><span class="line">        movementY = input.Get&lt;Vector2&gt;().y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//力的作用都用FixedUpdate</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//对Player的刚体施加力，参数是Vector3，本游戏只在x，z轴运动，所以新建Vector3将y的力设为0</span></span><br><span class="line">        rb.AddForce(<span class="keyword">new</span> 				Vector3(movementX,<span class="number">0</span>,movemenetY)*speed);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong id="f">OnMove(InputValue input)</strong>的来源</p>
<p>打开Inputs文件夹</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142226660.png" alt="image-20231213142226660"></p>
<p>打开这个Roll A Ball</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142258491.png" alt="image-20231213142258491"></p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142242440.png" alt="image-20231213142242440"></p>
<p>发现Actions有三种Move、Look、Fire，Move下方有WASD，在按下WASD时，会调用OnMove(InputValue input)方法，它会传入一个InputValue类型的参数，InputValue类有一个Get泛型方法，可以返回Vector2类型的值，这个值就是玩家键盘的输入，w、s对应x，a、d对应y。获取到这个值，再通过这个值对Player刚体施加力，就能实现键盘控制小球移动。</p>
<p>将代码挂载好后，玩家就可以对小球进行控制。</p>
<p>游戏的基本骨架已经完成了，接下来是丰富游戏内容，优化游戏体验，建立游戏玩法。</p>
<p>设置平台边界，让小球不能掉出平台。新建一个cube，一个cube的边长是一个网格大小，设置它的Scale为（0.5，2，20.5）,Position值为（0，0，10），给它命名为West Wall，以此类推…</p>
<blockquote>
<p>Cube和Sphere自带<strong id="g">碰撞体(Collider)</strong>，所以可以跟小球产生碰撞，如果有一者没有碰撞体，那么当两物体相撞时会直接穿过对方。</p>
</blockquote>
<p>为Wall建立一个Material。</p>
<p>四面Wall创建好后可以用一个Create Empty创建一个空Object，然后命名为Walls用来作为四个Wall的父容器，方便管理，只需要全选Wall然后将它们拖拽到Walls处。</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142313351.png" alt="image-20231213142313351"></p>
<p>如果是大型项目的话会有很多gameObject，Hierarchy窗口会很乱，所以要养成这种<strong id="h">层级管理</strong>的意识。</p>
<p>接下来，让摄像机跟随Player移动，使游戏体验效果更好。为摄像机附加一个Script，需要达到的效果是：小球移动时，游戏界面跟随小球的移动而移动。</p>
<p>这个脚本需要获取相机相对于小球位置的向量，动态获取小球移动后的位置，用小球的移动后的位置加小球相距相机的位置。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CameraController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//主要用于获取小球位置</span></span><br><span class="line">    <span class="keyword">public</span> GameObject ball;</span><br><span class="line">    <span class="comment">//差距向量</span></span><br><span class="line">    Vector3 offset = <span class="keyword">new</span> Vector3();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//用相机初始位置-小球初始位置</span></span><br><span class="line">        offset =  <span class="keyword">this</span>.transform.position - ball.transform.position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相机跟随用LateUpdate，在所有Update调用完后调用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LateUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//相机跟随位置 = 小球位置+差距向量</span></span><br><span class="line">        tranform.position = offset + ball.transform.position;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相机跟随效果完成</span></span><br></pre></td></tr></table></figure>

<p>现在有了游戏角色，有了游戏场景，还有相机跟随效果，但游戏很单调，没有什么玩法。</p>
<p>在场景中添加一些可拾取物，增加游戏玩法：用小球拾取物品。</p>
<p>创建Cube，重命名为PickUp，添加Material，设置Scale为（0.5，0.5，0.5），这样会使得PickUp看起来更小巧，更精致。再给PickUp添加一个旋转效果，使游戏更生动。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rotator</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使PickUp转起来</span></span><br><span class="line">        transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">15</span>,<span class="number">30</span>,<span class="number">45</span>)*Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将代码挂载到PickUp上，运行游戏，就有旋转的效果了。</p>
<p>现在小球只能跟PickUp碰撞，但产生不了任何作用，将PickUp的Box Collider组件中的is Trigger勾选，在运行游戏可以发现小球能够直接穿过PickUp，is Trigger选项意思是碰撞体是否作为触发器使用。当PickUp作为一个触发器使用时，如果小球进入了PickUp，小球就会调用一个方法<strong id="i">OnTriggerEnter(Collider other)</strong>，这个方法会将PickUp的Collider作为参数other传进来，可以用other做一些事，比如消灭这个PickUp。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在PlayerController中添加方法OnTriggerEnter(Collider other)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    other.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新游戏，发现小球碰到PickUp时会将PickUp消灭。</p>
<p>但是，这里有一个问题，如果有多个Trigger，每个Trigger有不同的作用，如果代码写成上面那样，小球进入任何Trigger都会将它消灭，而不是让Trigger产生预期的作用。那么，需要让小球知道，只有进入PickUp这个Trigger时才将它消灭。</p>
<p>可以通过  <strong id="j">Tag</strong>   对PickUp的Trigger进行标记。</p>
<p>先添加PickUp标签，再选中PickUp</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142326809.png" alt="image-20231213142326809"></p>
<p>修改PlayerController，使用<strong id="k">CompareTag</strong>方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果Tag等于PickUp，则消除它</span></span><br><span class="line">    <span class="keyword">if</span>(other.gameObject.CompareTag(<span class="string">&quot;PickUp&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        other.gameObject.setActive(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>游戏中往往有很多个PickUp，所以要将PickUp这个GameObject重复利用。将PickUp制成<strong id="l">Prefab(预制体)</strong> ，创建一个Prefabs文件夹，只需要将PickUp从Hierarchy窗口拖拽到Prefabs文件夹即可，此时PickUp将变成蓝色。</p>
<p>在游戏场景内创建多个PickUp可以选中PickUp然后Crtl+D复制再拖动，也可以打开Prefabs文件夹将预制体往Scene界面拖拽。</p>
<p>要保持规整性，可以点击Scene视图右上角的y切换到俯视图模式</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142337068.png" alt="image-20231213142337068"></p>
<p>俯视图模式下拖拽物体不会对y轴产生影响，所以可以很方便的放置预制体</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142345823.png" alt="image-20231213142345823"></p>
<p>最后将所有PickUp用一个空GameObject归纳起来。</p>
<p>现在游戏已经基本成型了，但还是缺点乐趣，玩家不能直观地看出自己已经收集了多少个PickUp，就算收集了所有PickUp，也没有什么成就感。</p>
<p>现在需要游戏本身与玩家进行交互，所以需要有<strong id="m">UI</strong>（User Interface），系统和用户交互的界面。</p>
<p>首先需要一个计数栏，对玩家收集的PickUp进行记录。选择Unity UI中的<strong id="n">Text-TextMeshPro</strong>来制作。</p>
<p>在Hierarchy窗口中右键 -&gt; UI -&gt; Text-TextMeshPro，修改它的名字为Count，将文本修改如下</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213211206744.png" alt="image-20231213211206744"></p>
<p>将收集信息Count放在游戏界面左上角是个不错的想法，选中Count，点击<strong id="o">Rect Transform</strong>下方的双矩形图标，可以快速修改<strong id="p">pivot</strong>和position，</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213211222631.png" alt="image-20231213211222631"></p>
<p>按住shift和alt再点击左上角的矩形，这时锚点和文体框的位置都会移到游戏界面左上方，再对位置进行微调，让他处在完美的位置。Rect Transform中的Pos X和Pox Y都是相对于锚点的位置。</p>
<p>如果文本比较长，要对文本框的宽度和高度进行设置，避免溢出导致变形。</p>
<p>文本框已经加到游戏界面中了，现在需要在游戏角色收集PickUp时更新Count的输出。</p>
<p>在PlayerController中添加代码，完善后的代码为</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ++表示新加入的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> speed = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Rigidbody rb;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> movementX;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> movementY;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ++  用以存放</span></span><br><span class="line">    <span class="keyword">public</span> TMP_Text countNum;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMove</span>(<span class="params">InputValue input</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        movementX = input.Get&lt;Vector2&gt;().x;</span><br><span class="line">        movementY= input.Get&lt;Vector2&gt;().y;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//++ Update刷新count显示内容，手机玩所有小球显示胜利</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        countNum.text = <span class="string">&quot;Count :&quot;</span> + count.ToString();</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">13</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            countNum.text = <span class="string">&quot;YOU WIN !!! CONGRATULATIONS!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb.AddForce(<span class="keyword">new</span> Vector3(movementX,<span class="number">0</span>,movementY)*speed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (other.gameObject.CompareTag(<span class="string">&quot;PickUp&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            other.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>到这里，Roll A Ball 整个游戏的开发流程就结束了。</p>
<p>因为游戏比较简单，所以简单测试功能正常就OK了。</p>
<p>接下来是打包。</p>
<p>游戏比较小，所以窗口化游玩是个不错的选择。</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142406093.png" alt="image-20231213142406093"></p>
<p>点击左下角的Player Settings，设置窗口化</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142418377.png" alt="image-20231213142418377"></p>
<p>OK，退出点击Build。</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142440321.png" alt="image-20231213142440321"></p>
<p>试玩游戏</p>
<p><img src="https://raw.githubusercontent.com/scazzh/blogpic/main/pic/image-20231213142459627.png" alt="image-20231213142459627"></p>
<p>通关了自己的游戏，Amazing！！！</p>
<p>总结：</p>
<p>获得自己亲手完成的游戏作品无疑是对自己最大的鼓励。在制作的流程中还有许多不理解的地方，比如一些组件的使用，一些组件里的属性的作用等。长路漫漫，漫漫长路，都是收获之路。</p>
<p>参考：</p>
<p>[Unity官方教程Roll A Ball](<a href="https://space.bilibili.com/386224375/search/video?keyword=roll">Unity官方的个人空间-Unity官方个人主页-哔哩哔哩视频 (bilibili.com)</a>)</p>
]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>Unity3D基础</tag>
        <tag>简单小游戏</tag>
        <tag>教程学习</tag>
      </tags>
  </entry>
  <entry>
    <title>启</title>
    <url>/2023/12/12/%E5%90%AF/</url>
    <content><![CDATA[<blockquote>
<p>业精于勤，荒于嬉；行成于思，毁于随。						——【唐】韩愈《进学解》</p>
</blockquote>
<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。		——【战国】荀子《劝学》</p>
</blockquote>
<p>要说为什么想写博客，其主要的原因是自己总是学多积少，又很懒，但是野心很大，什么都想学，但是总是不积累，不积累就不容易反思，不容易反思就导致自己总是在门外徘徊，刚进门尝到了甜头就开始原地享受，最终发现自己学什么都是半吊子。</p>
<p>以前认为写博客是很浪费时间的行为，写的东西也大多是知识点，相当于把百度百科移植了一般，就算自己写了文章也很少会回头看，越写越没有动力，味同嚼蜡。这种循环怎么能让人坚持下去呢。</p>
<p>直到自己真正做完一个项目，用心的写完自己一步步实践的过程和过程中遇到的问题的解决方法与反思，一看时间已是凌晨2点多，但是奇怪的是自己并不累，而且感觉到十分满足的时候，我才明白什么是高级的快乐。</p>
<blockquote>
<p>学而不思则罔，思而不学则殆。									——【春秋】《论语·为政》</p>
</blockquote>
<p>圣人不愧是圣人，只有自己亲身体会，才能感悟话中的含义。</p>
]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>非技术</tag>
      </tags>
  </entry>
</search>
